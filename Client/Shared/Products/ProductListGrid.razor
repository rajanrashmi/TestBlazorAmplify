@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div>@ErrorMessage</div>
}
else if (Products != null && Products.Count() > 0)
{
    @using System.Net.Http.Json

    <MudDataGrid T="BucketObject" MultiSelection="true" Items="@Products" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter"
             Hideable="true" RowClick="@RowClicked" SelectedItemsChanged="@SelectedItemsChanged">
        <ToolBarContent>
            <MudText Typo="Typo.h6">S3 Obect List</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <Columns>
            @*<SelectColumn T="BucketObject" />*@
            <PropertyColumn Property="x => x.Id" Title="Id" Sortable="false" Filterable="false" />
            <PropertyColumn Property="x => x.Etag" Sortable="false" Filterable="false" />
            <PropertyColumn Property="x => x.FileName" Title="S3 Object"  SortBy="@_sortBy" />
            <TemplateColumn Context="data" T="BucketObject" Sortable="false" Filterable="false" CellClass="d-flex justify-end" >
                <CellTemplate  >
                    <MudIconButton  Size="@Size.Large" Icon="@Icons.Material.Filled.OpenInFull"
                               OnClick="@(async _=> await SelectProduct.InvokeAsync(data.Item))" />
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="BucketObject" />
        </PagerContent>
    </MudDataGrid>

    <div class="d-flex flex-wrap mt-4">
        <MudSwitch @bind-Checked="@_sortNameByLength" Color="Color.Primary">Sort S3 Object Column By Length</MudSwitch>
    </div>

    <MudExpansionPanels Style="flex:1">
        <MudExpansionPanel Text="Show Events">
            @foreach (var message in _events)
            {
                <MudText Typo="@Typo.body2">@message</MudText>
            }
            @if (_events.Count > 0)
            {
                <div class="d-flex">
                    <MudSpacer />
                    <MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled"
                        OnClick="@(() => _events.Clear())">Clear</MudButton>
                </div>
            }
        </MudExpansionPanel>
    </MudExpansionPanels>

    
}
else
{
    <MudPaper Class="px-8 py-4 mud-theme-primary">Loading data...</MudPaper>
}
@code {
    [Parameter] public IEnumerable<BucketObject> Products { get; set; }
    [Parameter] public EventCallback<BucketObject> DeleteProduct { get; set; }
    [Parameter] public EventCallback<BucketObject> SelectProduct { get; set; }
    [Parameter] public string ErrorMessage { get; set; }
    //private IEnumerable<BucketObject> Elements = new List<BucketObject>();
    private string _searchString;
    private bool _sortNameByLength;
    private List<string> _events = new();
    // custom sort by name length
    private Func<BucketObject, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x.FileName.Length;
        else
            return x.FileName;
    };
    // quick filter - filter gobally across multiple columns with the same input
    private Func<BucketObject, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        //if (x.Sign.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
        //    return true;

        if (x.FileName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        //if ($"{x.Number} {x.Position} {x.Molar}".Contains(_searchString))
        //    return true;

        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        //Elements = await httpClient.GetFromJsonAsync<List<Element>>("webapi/periodictable");
    }

    // events
    void RowClicked(DataGridRowClickEventArgs<BucketObject> args)
    {
        _events.Insert(0, $"Event = RowClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void SelectedItemsChanged(HashSet<BucketObject> items)
    {
        _events.Insert(0, $"Event = SelectedItemsChanged, Data = {System.Text.Json.JsonSerializer.Serialize(items)}");
    }

    

    void ViewS3ObjectContent()
    {
        
    }
}